@using Newtonsoft.Json
@using Humanizer
@model ChartVM
@{
    var labels = JsonConvert.SerializeObject(Model.Data.Keys);
    var data = JsonConvert.SerializeObject(Model.Data.Values.Select(v => (int)v));
}

<!-- Inisisalisasi Chart.JS -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
<!-- Akhir Inisisalisasi Chart.JS -->

<canvas id="@(Model.Id)"></canvas>
<input id="labels@(Model.Id)" hidden value="@labels" />
<input id="data@(Model.Id)" hidden value="@data" />

<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
        const id = '@(Model.Id)';
        const ctx = document.getElementById(id);
        const labelsJson = $('#labels@(Model.Id)').val();
        const labels = JSON.parse(labelsJson);
        const dataJson = $('#data@(Model.Id)').val();
        const data = JSON.parse(dataJson);

        let chart;
        let isAnimating = false;
        let hasAnimated = false;

        function createChart() {
            chart = new Chart(ctx, {
                type: '@(Model.Type.Humanize())',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '@(Model.Label)',
                        data: data,
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    borderWidth: 20,
                    borderRadius: 1,
                    animation: {
                        duration: 4000
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right',
                            labels: {
                                font: {
                                    size: 14
                                },
                                padding: 35
                            }
                        }
                    }
                }
            });
        }

        const observer = new IntersectionObserver(function (entries) {
            if (entries[0].isIntersecting === true && !isAnimating && !hasAnimated) {
                isAnimating = true;
                setTimeout(() => {
                    if (chart) {
                        chart.destroy();
                    }
                    createChart();
                    hasAnimated = true;
                }, 300);
            } else if (entries[0].isIntersecting === false) {
                isAnimating = false;
            }
        }, { threshold: [0.1] });

        const element = document.querySelector(`#${id}`);
        console.log("element", element);
        observer.observe(element);
    });
</script>